#! winxed

// pizarra: a simple drawing tool using WinxedXlib module


$load "Guitor.pbc";

$include "Guitor.winxhead";

using namespace Guitor;
using namespace Guitor.Events;

//**********************************************************************

function evhandler(object, string methodname)
{
    var method = find_method(object, methodname);
    return function (event) { object.*method(event); };
}

function method_fun(obj, string methodname)
{
    var method = find_method(obj, methodname);
    return function (args[slurpy])
    {
        return obj.*method(args:[flat]);
    };
}

//**********************************************************************

// Size in mm
const int BOXWIDTH = 5;
const int BOXHEIGHT = 5;
// Min size in pixels
const int MINBOXWIDTH = 16;
const int MINBOXHEIGHT = 16;

function boxsize(display)
{
    // Convert box size to pixels
    int wp = display.Width();
    int wm = display.WidthMM();
    int boxwidth = BOXWIDTH * wp / wm;
    int hp = display.Height();
    int hm = display.HeightMM();
    int boxheight = BOXHEIGHT * hp / hm;
    if (boxwidth < MINBOXWIDTH)
        boxwidth = MINBOXWIDTH;
    if (boxheight < MINBOXHEIGHT)
        boxheight = MINBOXHEIGHT;
    return boxwidth, boxheight;
}

class BoxedSelector
{
    var boxwidth;
    var boxheight;
    var width;
    var height;
    function BoxedSelector(display, int xitems, int yitems)
    {
        :(int boxwidth, int boxheight) = boxsize(display);
        self.boxwidth = boxwidth;
        self.boxheight = boxheight;
        int width = (boxwidth + 2) * xitems + 4;
        int height = (boxheight + 2) * yitems + 4;
        self.width = width;
        self.height = height;
    }
    function getwidth()
    {
        return int(self.width);
    }
    function getheight()
    {
        return int(self.height);
    }
}

//**********************************************************************

class ColorSelector : ChildWindow, BoxedSelector
{

    var pizarra;
    var colors;
    function ColorSelector(pizarra, int x, int y)
    {
        self.BoxedSelector(pizarra.display, 3, 5);
        self.pizarra = pizarra;
        string colors[] = [
           "black",  "white",      "grey",
           "red",    "green",      "blue",
           "yellow", "pink",       "orange",
           "violet", "maroon",     "aquamarine",
           "coral",  "lime green", "light steel blue"
        ];
        self.colors = colors;
        self.ChildWindow(pizarra, x, y, self.width, self.height);
        self.OnExpose      += evhandler(self, "onexpose");
        self.OnButtonPress += evhandler(self, "onbuttonpress");
        self.Map();
    }
    function onexpose(event)
    {
        int width = self.width;
        int height = self.height;
        self.SetForeground("black");
        self.DrawRectangle(0, 0, width - 1, height - 1);
        int boxwidth = self.boxwidth;
        int boxheight = self.boxheight;
        var colors = self.colors;
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 3; ++j) {
                self.SetForeground("black");
                int x = 3 + j * (boxwidth + 2);
                int y = 3 + i * (boxheight + 2);
                self.DrawRectangle(x, y,
                        boxwidth - 1, boxheight - 1);
                string color = colors[i * 3 + j];
                self.SetForeground(color);
                self.FillRectangle(x + 1, y + 1,
                        boxwidth - 2, boxheight - 2);
            }
    }
    function onbuttonpress(event)
    {
        int boxwidth = self.boxwidth;
        int boxheight = self.boxheight;
        int x = event.x();
        int y = event.y();
        x = (x - 3) / (boxwidth + 2);
        y = (y - 3) / (boxheight + 2);
        if (x >= 0 || x < 3 || y >= 0 || y < 5) {
            var colors = self.colors;
            string color = colors[y * 3 + x];
            self.pizarra.setcolor(color);
        }
    }
}

//**********************************************************************

class ToolSelector : ChildWindow, BoxedSelector
{
    var pizarra;
    var pmline;
    var pmpoly;
    var pmfillpoly;
    function ToolSelector(pizarra, int x, int y)
    {
        self.BoxedSelector(pizarra.display, 2, 3);
        self.pizarra = pizarra;
        self.ChildWindow(pizarra, x, y, self.width, self.height);
        self.OnDestroy     += evhandler(self, "ondestroy");
        self.OnExpose      += evhandler(self, "onexpose");
        self.OnButtonPress += evhandler(self, "onbuttonpress");
        self.Map();
        // Ugly icon for hand drawn lines
        self.pmline = self.CreatePixmapFromBuffer(<<:
/* XPM */
static char *line[] = {
"16 16 2 1",
" 	c #FFFFFF",
"+	c #000000",
"                ",
"      ++++      ",
"     +          ",
"     +          ",
"      ++++      ",
"          +     ",
"           +    ",
"            +   ",
"           +    ",
"          +     ",
"        ++      ",
"       +        ",
"      +         ",
"     +          ",
" ++++           ",
"                ",
};
:>>
        );
        self.pmpoly = self.CreatePixmapFromBuffer(<<:
/* XPM */
static char *poly[] = {
"16 16 2 1",
" 	c #FFFFFF",
"+	c #000000",
"                ",
"     +          ",
"     ++         ",
"     + +        ",
"     +  +       ",
"     +   +      ",
"     +    +     ",
"     +      +   ",
"    +        +  ",
"   +          + ",
"  +         ++  ",
" +        ++    ",
"  +     ++      ",
"   +  ++        ",
"    ++          ",
"                ",
};
:>>
        );
        self.pmfillpoly = self.CreatePixmapFromBuffer(<<:
/* XPM */
static char *fillpoly[] = {
"16 16 2 1",
" 	c #FFFFFF",
"+	c #000000",
"                ",
"     +          ",
"     ++         ",
"     +++        ",
"     ++++       ",
"     +++++      ",
"     ++++++     ",
"     ++++++++   ",
"    ++++++++++  ",
"   ++++++++++++ ",
"  ++++++++++++  ",
" +++++++++++    ",
"  ++++++++      ",
"   +++++        ",
"    ++          ",
"                ",
};
:>>
        );
    }
    function ondestroy(event)
    {
        for (var pixmap in
               [ self.pmline, self.pmpoly, self.pmfillpoly ] )
            if (pixmap != null)
                pixmap.Free();
        self.pmline = null;
        self.pmpoly = null;
        self.pmfillpoly = null;
    }
    function onexpose(event)
    {
        int width = self.width;
        int height = self.height;
        int boxwidth = self.boxwidth;
        int boxheight = self.boxheight;
        self.SetForeground("black");
        self.DrawRectangle(0, 0, width - 1, height - 1);
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 2; ++j) {
                int x = 3 + j * (boxwidth + 2);
                int y = 3 + i * (boxheight + 2);
                self.DrawRectangle(x, y, boxwidth - 1, boxheight - 1);
                switch (i * 2 + j) {
                  case 0:
                    self.CopyArea(self.pmline, 0, 0, 16, 16, x + 1, y + 1);
                    break;
                  case 1:
                    self.DrawLine(x + 2, y + 3, x + 10, y + 14);
                    break;
                  case 2:
                    self.DrawRectangle(x + 3, y + 3, boxwidth - 7, boxheight - 7);
                    break;
                  case 3:
                    self.FillRectangle(x + 3, y + 3, boxwidth - 6, boxheight - 6);
                    break;
                  case 4:
                    self.CopyArea(self.pmpoly, 0, 0, 16, 16, x + 1, y + 1);
                    break;
                  case 5:
                    self.CopyArea(self.pmfillpoly, 0, 0, 16, 16, x + 1, y + 1);
                    break;
                }
            }
    }
    function onbuttonpress(event)
    {
        int boxwidth = self.boxwidth;
        int boxheight = self.boxheight;
        int x = event.x();
        int y = event.y();
        x = (x - 3) / (boxwidth + 2);
        y = (y - 3) / (boxheight + 2);
        if (x >= 0 || x < 2 || y >= 0 || y < 2) {
            self.pizarra.setmode(y * 2 + x);
        }
    }
}

//**********************************************************************

class Thing
{
    var colorspec;
    var _color;
    function Thing(string colorspec)
    {
        self.colorspec = colorspec;
    }
    function _getcolor(drawable)
    {
        var color = self._color;
        if (color == null)
            self._color = color = drawable.display.ParseColor(self.colorspec);
        return color;
    }
    function setforeground(drawable)
    {
        drawable.SetForeground(self._getcolor(drawable));
    }
    function setbackground(drawable)
    {
        drawable.SetBackground(self._getcolor(drawable));
    }
}

class Line : Thing
{
    var x;
    var y;
    var closed;
    function Line(string colorspec, int x0, int y0, int x1, int y1)
    {
        self.Thing(colorspec);
        int x[] = [ x0, x1 - x0 ];
        int y[] = [ y0, y1 - y0 ];
        self.x = x;
        self.y = y;
        self.closed = false;
    }
    function draw(drawable)
    {
        self.setforeground(drawable);
        var x = self.x;
        var y = self.y;
        int x0 = x[0];
        int y0 = y[0];
        for (int i = 1, n = elements(x); i < n; ++i) {
            int x1 = x0 + x[i];
            int y1 = y0 + y[i];
            drawable.DrawLine(x0, y0, x1, y1);
            x0 = x1;
            y0 = y1;
        }
        if (self.closed)
            drawable.DrawLine(x0, y0, x[0], y[0]);
    }
    function addsegment(int x1, int y1)
    {
        push(self.x, x1);
        push(self.y, y1);
    }
    function close()
    {
        self.closed =: true;
    }
}

class Poly : Line
{
    function Poly(string colorspec, int x0, int y0, int x1, int y1)
    {
        self.Line(colorspec, x0, y0, x1, y1);
    }
}

class FillPoly : Poly
{
    function FillPoly(string colorspec, int x0, int y0, int x1, int y1)
    {
        self.Poly(colorspec, x0, y0, x1, y1);
    }
    function draw(drawable)
    {
        self.setforeground(drawable);
        self.setbackground(drawable);
        drawable.FillPolygon(self.x, self.y);
    }
    function hint(drawable)
    {
        self.setforeground(drawable);
        drawable.SetFunction(GXinvert);
        drawable.DrawLines(self.x, self.y);
        drawable.SetFunction(GXcopy);
    }
}

class HandLine : Thing
{
    var xcoord;
    var ycoord;
    function HandLine(string colorspec)
    {
        self.Thing(colorspec);
        int x[];
        int y[];
        self.xcoord = x;
        self.ycoord = y;
    }
    function push(int x, int y)
    {
        push(self.xcoord, x);
        push(self.ycoord, y);
    }
    function draw(drawable)
    {
        var x = self.xcoord;
        var y = self.ycoord;
        int n = elements(x) - 1;
        self.setforeground(drawable);
        if (n == 0)
            drawable.DrawPoint(x[0], y[0]);
        else {
            int x0 = x[0], y0 = y[0];
            for (int i = 1; i < n; ++i) {
                int x1 = x0 + x[i], y1 = y0 + y[i];
                drawable.DrawLine(x0, y0, x1, y1);
                x0 = x1; y0 = y1;
            }
        }
    }
}

class BaseRectangle : Thing
{
    var x0;
    var y0;
    var x1;
    var y1;
    function BaseRectangle(string colorspec, int x0, int y0, int x1, int y1)
    {
        self.Thing(colorspec);
        if (x0 < x1) {
            self.x0 = x0;
            self.x1 = x1;
        }
        else {
            self.x0 = x1;
            self.x1 = x0;
        }
        if (y0 < y1) {
            self.y0 = y0;
            self.y1 = y1;
        }
        else {
            self.y0 = y1;
            self.y1 = y0;
        }
    }
}

class Rectangle : BaseRectangle
{
    function Rectangle(string colorspec, int x0, int y0, int x1, int y1)
    {
        self.BaseRectangle(colorspec, x0, y0, x1, y1);
    }
    function draw(drawable)
    {
        self.setforeground(drawable);
        int x0 = self.x0;
        int x1 = self.x1;
        int y0 = self.y0;
        int y1 = self.y1;
        drawable.DrawRectangle(x0, y0, x1 - x0, y1 - y0);
    }
}

class FillRectangle : BaseRectangle
{
    function FillRectangle(string colorspec, int x0, int y0, int x1, int y1)
    {
        self.BaseRectangle(colorspec, x0, y0, x1, y1);
    }
    function draw(drawable)
    {
        self.setforeground(drawable);
        int x0 = self.x0;
        int x1 = self.x1;
        int y0 = self.y0;
        int y1 = self.y1;
        drawable.FillRectangle(x0, y0, x1 - x0, y1 - y0);
    }
}

//**********************************************************************

class Pizarra : TopLevelWindow
{
    var width;
    var height;
    var yboard;
    var board;
    function Pizarra(controller)
    {
        var display = controller.display;
        string title = "pizarra";
        int width = 600;
        int height = 400;
        self.width = width;
        self.height = height;
        self.TopLevelWindow(controller, title, 0, 0, width, height,
                { "background-color" : display.ParseColor("grey") } );
        controller.created(self);
        self.SetWMProtocols(['WM_DELETE_WINDOW']);
        self.OnDestroy += function (event)
        {
            self.controller.destroyed(self);
        };
        self.OnConfigure     += evhandler(self, "onconfigure");
        self.OnClientMessage += evhandler(self, "onclientmessage");

        var colorsel = new ColorSelector(self, 4, 2);
        int yboard = colorsel.getwidth();
        int ytoolset = colorsel.getheight() + 4;
        var toolsel = new ToolSelector(self, 4, ytoolset);
        int ybutton = ytoolset + toolsel.getheight() + 2;
        int ybaux = toolsel.getwidth();
        if (yboard < ybaux)
            yboard = ybaux;
        var buttonclose = new TextButton(self, 4, ybutton, 0, 0,
                "close", null);
        ybaux = buttonclose.getwidth();
        if (yboard < ybaux)
            yboard = ybaux;
        yboard += 4;
        self.yboard = yboard;

        self.board = new Board(self, yboard, 2, width - yboard - 2, height - 4);
        self.board.Map();

        colorsel.MoveWindow((yboard - colorsel.getwidth()) / 2 , 2);
        toolsel.MoveWindow((yboard - toolsel.getwidth()) / 2 , ytoolset);
        buttonclose.MoveWindow((yboard - buttonclose.getwidth()) / 2, ybutton);

        buttonclose.OnClick += evhandler(self, "onclickclose");
        buttonclose.Map();
    }
    function onconfigure(event)
    {
        int nwidth = event.width();
        int nheight = event.height();
        var width = self.width;
        var height = self.height;
        if (width != nwidth || height != nheight) {
            if (self.board != null)
                self.board.ResizeWindow(nwidth - self.yboard - 2, nheight - 4);
            self.width = nwidth;
            self.height = nheight;
        }
    }
    function onclientmessage(event)
    {
        self.close();
    }
    function onclickclose(event)
    {
        self.close();
    }

    function newwindow()
    {
        self.controller.pushaction(function ()
            {
                var np = new Pizarra(self.controller);
                np.Map();
            } );
    }
    function close()
    {
        self.controller.pushaction(method_fun(self, "Destroy"));
    }
    function setcolor(string spec)
    {
        self.board.setcolor(spec);
    }
    function setmode(int mode)
    {
        self.board.setmode(mode);
    }
}

//**********************************************************************

class Board : ChildWindow
{
    const int
       HANDLINE  = 0, LINE = 1,
       RECTANGLE = 2, FILLRECT = 3,
       POLY      = 4, FILLPOLY = 5;

    var parent;
    var mode;
    var listline;
    var line;
    var pressed;
    var initx;
    var inity;
    var oldx;
    var oldy;
    var colorspec;
    var menu;
    var grid;
    function Board(parent, int x, int y, int width, int height)
    {
        self.parent = parent;
        self.mode = HANDLINE;
        self.listline = [];
        self.ChildWindow(parent, x, y, width, height);
        self.pressed = false;
        self.initx = 0;
        self.inity = 0;
        self.oldx = 0;
        self.oldy = 0;
        self.colorspec = "black";
        self.grid = 0;

        self.OnExpose        += evhandler(self, "onexpose");
        self.OnKeyPress      += evhandler(self, "onkeypress");
        self.OnButtonPress   += evhandler(self, "onbuttonpress");
        self.OnButtonRelease += evhandler(self, "onbuttonrelease");
        self.OnMotion        += evhandler(self, "onmotion");

        var menu = new Menu(self.display, self.display.CreateFont("courier-12"));
        menu.push("new window", method_fun(self.parent, "newwindow"));
        menu.push("grid off", function () { self.setgrid(0); });
        menu.push("grid 4", function () { self.setgrid(4); });
        menu.push("grid 8", function () { self.setgrid(8); });
        menu.push("grid 16", function () { self.setgrid(16); });
        menu.push("close",      method_fun(self.parent, "close"));
        self.menu = menu;
    }

    function onexpose(event)
    {
        for (var l in self.listline)
            l.draw(self);
    }
    function onkeypress(event)
    {
        int code = event.keycode();
        var display = self.display;
        string key = display.KeysymToString(display.KeycodeToKeysym(code));
        switch (key) {
          case "Escape":
            self.parent.close();
            break;
          case "l":
            self.mode =: HANDLINE;
            break;
          case "r":
            self.mode =: RECTANGLE;
            break;
          case "f":
            self.mode =: FILLRECT;
            break;
          case "BackSpace":
            self.pressed =: false;
            if (self.line != null)
                self.line = null;
            if (elements(self.listline) > 0)
                self.listline.pop();
            //TODO else beep, or something.
            self.ClearArea(0, 0, 0, 0, 1);
            break;
          case "Shift_L":
          case "Shift_R":
            int mode = self.mode;
            if (self.pressed && (mode == LINE || mode == POLY || mode == FILLPOLY)) {
                int initx = self.initx;
                int inity = self.inity;
                int oldx = self.oldx;
                int oldy = self.oldy;
                self.hintline(initx, inity, oldx, oldy);
                var l = self.line;
                if (l == null) {
                    switch (mode) {
                      case LINE:
                        l = new Line(self.colorspec, initx, inity, oldx, oldy);
                        break;
                      case POLY:
                        l = new Poly(self.colorspec, initx, inity, oldx, oldy);
                        break;
                      case FILLPOLY:
                        l = new FillPoly(self.colorspec, initx, inity, oldx, oldy);
                        break;
                    }
                    self.line = l;
                    self.listline.push(l);
                }
                else {
                    if (mode == FILLPOLY)
                        l.hint(self);
                    l.addsegment(oldx - initx, oldy - inity);
                }
                switch (mode) {
                  case LINE:
                    l.draw(self);
                    break;
                  case POLY:
                    self.DrawLine(initx, inity, oldx, oldy);
                    break;
                  case FILLPOLY:
                    l.hint(self);
                    break;
                }
                self.initx =: oldx;
                self.inity =: oldy;
                self.oldx =: oldx;
                self.oldy =: oldy;
            }
            break;
          default:
            int sym = self.display.KeycodeToKeysym(code);
            say('Key name: ', self.display.KeysymToString(sym));
        }
    }
    function onbuttonpress(event)
    {
        int button = event.button();
        if (button == 3) {
            self.menu.activate_from(self, event);
            return;
        }
        self.pressed = button;
        int x = event.x();
        int y = event.y();
        int grid = self.grid;
        if (grid) {
            x += grid;
            x -= x % grid;
            y += grid;
            y -= y % grid;
        }
        self.initx =: x;
        self.inity =: y;
        self.oldx =: x;
        self.oldy =: y;
    }
    function onbuttonrelease(event)
    {
        if (! self.pressed)
            return;
        self.pressed = false;
        int initx = self.initx;
        int inity = self.inity;
        int oldx = self.oldx;
        int oldy = self.oldy;
        string colorspec = self.colorspec;
        switch (self.mode) {
          case RECTANGLE:
          case FILLRECT:
            self.hintrectangle(initx, inity, oldx, oldy);
            var r = self.mode == RECTANGLE ?
                new Rectangle(colorspec, initx, inity, oldx, oldy) :
                new FillRectangle(colorspec, initx, inity, oldx, oldy);
            self.listline.push(r);
            r.draw(self);
            break;
          case LINE:
            self.hintline(initx, inity, oldx, oldy);
            var l = self.line;
            if (l == null) {
                l = new Line(colorspec, initx, inity, oldx, oldy);
                self.listline.push(l);
            }
            else {
                if (event.state() & ShiftMask)
                    l.close();
                else
                    l.addsegment(oldx - initx, oldy - inity);
            }
            l.draw(self);
            break;
          case POLY:
            self.hintline(initx, inity, oldx, oldy);
            var p = self.line;
            if (p == null) {
                p = new Poly(colorspec, initx, inity, oldx, oldy);
                self.listline.push(p);
            }
            else {
                p.addsegment(oldx - initx, oldy - inity);
                p.close();
            }
            p.draw(self);
            break;
          case FILLPOLY:
            self.hintline(initx, inity, oldx, oldy);
            var fp = self.line;
            fp.hint(self);
            if (fp == null) {
                fp = new FillPoly(colorspec, initx, inity, oldx, oldy);
                self.listline.push(fp);
            }
            else {
                fp.addsegment(oldx - initx, oldy - inity);
                fp.close();
            }
            fp.draw(self);
            break;
        }
        self.line = null;
    }
    function onmotion(event)
    {
        if (self.pressed) {
            int x = event.x();
            int y = event.y();
            int grid = self.grid;
            if (grid) {
                x += grid;
                x -= x % grid;
                y += grid;
                y -= y % grid;
            }
            int oldx = self.oldx;
            int oldy = self.oldy;
            if (x != oldx || y != oldy) {
                switch (self.mode) {
                  case HANDLINE:
                    var line = self.line;
                    if (line == null) {
                        string colorspec = self.colorspec;
                        self.line = line = new HandLine(colorspec);
                        self.listline.push(line);
                        line.push(oldx, oldy);
                        self.SetForeground(self.display.ParseColor(colorspec));
                    }
                    line.push(x - oldx, y - oldy);
                    self.DrawLine(oldx, oldy, x, y);
                    break;
                  case LINE:
                  case POLY:
                  case FILLPOLY:
                    self.hintline(self.initx, self.inity, oldx, oldy);
                    self.hintline(self.initx, self.inity, x, y);
                    break;
                  case RECTANGLE:
                  case FILLRECT:
                    self.hintrectangle(self.initx, self.inity, oldx, oldy);
                    self.hintrectangle(self.initx, self.inity, x, y);
                    break;
                }
            }
            self.oldx =: x;
            self.oldy =: y;
        }
    }

    function setgrid(int n)
    {
        self.grid =: n;
    }
    function hinton()
    {
        self.SetFunction(GXinvert);
        self.SetLineAttributes(0, LineOnOffDash, 0, 0);
        self.SetSubwindowMode(IncludeInferiors);
    }
    function hintoff()
    {
        self.SetFunction(GXcopy);
        self.SetLineAttributes(0, LineSolid, 0, 0);
        self.SetSubwindowMode(ClipByChildren);
    }
    function hintline(int x0, int y0, int x1, int y1)
    {
        self.hinton();
        self.DrawLine(x0, y0, x1, y1);
        self.hintoff();
    }
    function hintrectangle(int x0, int y0, int x1, int y1)
    {
        int x = x0;
        int y = y0;
        int width = x1 - x;
        int height = y1 - y;
        if (width && height) {
            if (x > x1) {
                x = x1;
                width = -width; 
            }
            if (y > y1) {
                y = y1;
                height = -height;
            }
            self.hinton();
            self.DrawRectangle(x, y, width, height);
            self.hintoff();
        }
    }
    function opencolorsel(int x, int y)
    {
        var colorsel = new ColorSelector(self, x, y);
    }
    function setcolor(string spec)
    {
        self.colorspec = spec;
    }
    function setmode(int mode)
    {
        self.mode =: mode;
    }
}

//**********************************************************************

class MyController : Controller
{
    var counter;
    function MyController()
    {
        self.Controller();
        self.counter = 0;
    }
    function created(pizarra)
    {
        self.counter++;
    }
    function destroyed(pizarra)
    {
        var counter = self.counter;
        if (--counter == 0)
            self.Quit();
    }
}

//**********************************************************************

function main(args)
{
    int nargs = elements(args);
    var controller = new MyController();

    int n =  (nargs < 2) ? 1 : nargs - 1;
    for (int i = 0; i < n; ++i) {
        var pizarra = new Pizarra(controller);
        pizarra.Map();
    }

    controller.MainLoop();

    say('End');
    controller.Close();
}

// End.
