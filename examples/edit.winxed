#! winxed

// text example

$load "Guitor.pbc";

$include "Guitor.winxhead";

using namespace Guitor;
using namespace Guitor.Events;

//**********************************************************************

class EditWindow : TopLevelWindow
{
    var font;
    var width;
    var height;
    var edit;
    var alive;
    function EditWindow(controller, string fontname)
    {
        var font = controller.display.CreateFont(fontname);
        self.font = font;
        int width = 200;
        int height = font.getHeight();
        self.width = width;
        self.height = height;
        self.TopLevelWindow(controller, "Edit test",
            4, 4, width + 10, height + 20);
        self.SetWMProtocols(['WM_TAKE_FOCUS', 'WM_DELETE_WINDOW' ]);

        var edit = new EditBox(self, 4, 4, 0, 0, font);
        self.edit = edit;
        self.alive = true;
        edit.Map();

        self.OnClientMessage += function (event) { self.onclientmessage(event); };
        self.OnConfigure += function (event) { self.onconfigure(event); };
        self.OnDestroy += function (event) { self.ondestroy(event); };
        edit.OnDestroy += function (event) { self.oneditdestroy(event); };
        edit.OnKeyPress += function (event) { self.oneditkeypress(event); };
    }
    function oneditdestroy(event)
    {
        self.edit = null;
        self.Destroy();
    }
    function oneditkeypress(event)
    {
        switch (event.keyname()) {
          case "Return":
            say("Value: '", self.edit.getValue(), "'");
            self.edit.Destroy();
            break;
          case "Escape":
            say("Canceled");
            self.edit.Destroy();
            break;
        }
    }
    function ondestroy(event)
    {
        var controller = self.controller;
        controller.unregister(self);
        controller.Quit();
    }
    function onconfigure(event)
    {
        int width = event.width();
        self.width =: width;
        int height = event.height();
        self.height =: height;
        var childheight = self.font.getHeight() + 6;
        if (childheight >= height)
            childheight = height - 4;
        self.edit.ResizeWindow(width - 10, childheight);
    }
    function onclientmessage(event)
    {
        int type = event.message_type();
        if (type == self.InternAtom("WM_PROTOCOLS")) {
            int data0 = event.message_data(0);
            if (data0 == self.InternAtom("WM_DELETE_WINDOW")) {
                self.display.Flush();
                self.SetInputFocus(RevertToParent);
                self.alive =: false;
                self.edit.Destroy();
                //self.Destroy();
            }
            else if (data0 == self.InternAtom("WM_TAKE_FOCUS")) {
                if (self.edit != null && self.alive)
                    self.edit.SetInputFocus(RevertToParent);
                self.display.Flush();
            }
        }
    }
}

//**********************************************************************

function main(args)
{
    int size;
    if (elements(args) > 1)
        size = args[1];
    else
        size = 24;
    var controller = new Controller();
    var w = new EditWindow(controller, "sans-" + string(size));
    w.Map();

    controller.MainLoop();

    say('End');
    controller.Close();
}

// End.
