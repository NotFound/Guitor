#! winxed

// text example

$load "Guitor.pbc";

$include "Guitor.winxhead";

using namespace Guitor;
using namespace Guitor.Events;

//**********************************************************************

class TextWindow : TopLevelWindow
{
    var width;
    var height;
    var text;
    var font;
    var chunks;
    var start;
    var menu;
    function TextWindow(controller, string text, string fontname)
    {
        if (fontname == null)
            fontname = "courier-12";
        self.text = text;
        self.width = 600;
        self.height = 400;
        self.TopLevelWindow(controller, "Text and fonts test", 0, 0, 600, 400);
        var display = self.display;

        var font = display.CreateFont(fontname);
        //var font = display.getDefaultFont();
        self.SetFont(font);
        self.font = font;
        self.start = 0;

        self.OnConfigure += function (event) { self.onconfigure(event); };
        self.OnExpose += function (event) { self.onexpose(event); };
        self.OnKeyPress += function (event) { self.onkeypress(event); };
        self.OnButtonPress += function (event) { self.onbuttonpress(event); };
        self.OnClientMessage += function (event) { self.onclientmessage(event); };
        self.OnSelectionRequest += function (event) { self.onselectionrequest(event); };
        self.OnDestroy += function (event)
        {
            var controller = self.controller;
            controller.unregister(self);
            controller.Quit();
        };
        var menu = new Menu(display, display.CreateFont("sans-14"));
        menu.push("close", function () { self.controller.pushaction(function() { self.Destroy(); } ); } );
        menu.push("copy all", function () { self.copyall(); } );
        self.menu = menu;
    }
    function drawall()
    {
        string text = self.text;
        int pos = 0;
        int hfont = self.font.getHeight();
        int height = self.height;
        int y = 0;
        int start = self.start;
        int line = 0;
        for (int p in self.chunks) {
            if (line >= start) {
                y += hfont;
                if (y > height)
                    break;
                self.DrawImageString(0, y, substr(self.text, pos, p - pos - 1));
            }
            pos = p;
            ++line;
        }
        y += hfont;
        if (y <= height)
            self.DrawImageString(0, y, substr(self.text, pos));
    }
    function copyall()
    {
        // Copy all text to clipboard
        var display = self.display;
        int clipboard = display.InternAtom("CLIPBOARD");
        display.SetSelectionOwner(clipboard, self, CurrentTime);
    }

    function onconfigure(event)
    {
        int width = event.width();
        self.width =: width;
        self.height =: int(event.height());
        var font = self.font;
        var display = self.display;
        string text = self.text;
        int chunks[] = [ ];
        int len = length(text);
        string line;
        int pcurline = 0;
        int pnextline;
        do {
            if (pcurline > 0)
                push(chunks, pcurline);
            pnextline = indexof(text, "\n", pcurline);
            if (pnextline < 0)
                line = substr(text, pcurline);
            else
                line = substr(text, pcurline, pnextline - pcurline);

            int p = 0;
            while (font.getTextWidth(display, substr(line, p)) >= width) {
                int q = indexof(line, " ", p);
                if (q < 0)
                    break;
                int q1 = q;
                while (font.getTextWidth(display, substr(line, p, q1 - p)) < width) {
                    q = q1;
                    q1 = indexof(line, " ", q + 1);
                    if (q1 < 0)
                        break;
                }
                p = q + 1;
                if (p > 0)
                    push(chunks, pcurline + p);
            }

            if (pnextline >= 0)
                pcurline = pnextline + 1;
        } while (pnextline > 0);
        self.chunks = chunks;
    }
    function onexpose(event)
    {
        self.drawall();
    }
    function onkeypress(event)
    {
        var display = self.display;
        string key = event.keyname();
        switch (key) {
          case "Escape":
            self.Destroy();
            break;
          case "Down":
            ++self.start;
            self.ClearArea(0, 0, 0, 0, 0);
            self.drawall();
            break;
          case "Up":
            if (self.start > 0) {
                --self.start;
                self.ClearArea(0, 0, 0, 0, 0);
                self.drawall();
            }
            break;
        }
    }
    function onbuttonpress(event)
    {
        self.menu.activate_from(self, event);
    }
    function onclientmessage(event)
    {
        self.text = null;
        self.chunks = null;
        self.Destroy();
    }
    function onselectionrequest(event)
    {
        int requestor = event.requestor();
        int selection = event.selection();
        int target = event.target();
        int property = event.property();
        var display = self.display;

        int typeutf8 = display.InternAtom("UTF8_STRING");
        // Request for supported types: answer only utf8 text.
        if (display.GetAtomName(target) == "TARGETS") {
            display.ChangePropertyInt32(requestor,
                    property, target, PropModeReplace, typeutf8);
        }
        // Request for utf8 text: fine, do it.
        else if (target == typeutf8) {
            display.ChangePropertyString(requestor,
                    property, target, PropModeReplace, self.text);
        }
        else
            return;

        var notify = new Event(SelectionNotify);
        // No much support for creating events yet, use the
        // raw StructView for a now.
        var data = notify.eventdata;
        var view = notify.getview();
        view[data, 4] = requestor;
        view[data, 5] = selection;
        view[data, 6] = target;
        view[data, 7] = property;
        view[data, 8] = event.time();
        display.SendEvent(requestor, false, 0, notify);
    }
}

//**********************************************************************

function main(args)
{
    string text;
    string font;
    int nargs = elements(args);
    var controller = new Controller();
    if (nargs > 1) {
        string filename = args[1];
        var file = open(filename, "r");
        file.encoding("utf8");
        text = file.readall();
    }
    else
        text = "Hello, world!";
    if (nargs > 2)
        font = args[2];

    var textwindow = new TextWindow(controller, text, font);
    textwindow.SetWMProtocols(['WM_DELETE_WINDOW']);
    textwindow.Map();

    controller.MainLoop();

    say('End');
    controller.Close();
}

// End.
